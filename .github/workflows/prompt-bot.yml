name: Prompt Bot

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: "Prompt to send to the AI"
        required: false
  issue_comment:
    types: [created]

permissions:
  contents: write

jobs:
  run-prompt:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/prompt'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - id: resolve
        name: Resolve prompt from event or manual input
        env:
          PROMPT_SRC: ${{ github.event.client_payload.prompt != '' && github.event.client_payload.prompt
            || inputs.prompt != '' && inputs.prompt
            || 'Write a one-section homepage with a bold hero, subhead, and a single primary CTA button. Style it with Tailwind classes and export a React/Next.js page component (TypeScript, client component).' }}
        shell: bash
        run: |
          set -e
          {
            echo "prompt<<'EOF'"
            printf '%s\n' "$PROMPT_SRC"
            echo "EOF"
          } >>"$GITHUB_OUTPUT"

      - name: Call OpenAI (Responses API)
        id: openai
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -e
          jq -n --arg prompt "${{ steps.resolve.outputs.prompt }}" \
            '{model: "gpt-4.1-mini", input: $prompt}' \
            > request.json
          curl -s -X POST "https://api.openai.com/v1/responses" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -d @request.json \
            -o response.json
          cat response.json

      - name: Write output to app/page.tsx
        run: |
          set -e
          node -e "
          const fs = require('fs');
          const r = require('./response.json');
          const text = r.output_text || (r.output && r.output[0] && r.output[0].content && r.output[0].content[0] && r.output[0].content[0].text);
          if(!text) { console.error('No output_text found in response.json'); process.exit(1); }
          fs.writeFileSync('app/page.tsx', text);
          console.log('Wrote app/page.tsx with', text.length, 'chars');
          "

      - name: Commit & push changes
        shell: bash
        run: |
          git config user.name "ai-bot"
          git config user.email "ai-bot@users.noreply.github.com"
          git add app/page.tsx
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "AI bot: update homepage"
            git push
          fi
