name: Prompt Bot

on:
  # Run from the Actions tab with a manual prompt
  workflow_dispatch:
    inputs:
      prompt:
        description: "Prompt to send to the model"
        required: true
        type: string
  # Trigger from iOS Shortcuts POST /dispatches
  repository_dispatch:
    types: [chatgpt_task]
  # Optional: auto-run on commits to main
  push:
    branches: [ main ]
    paths:
      - "app/page.tsx"
      - ".github/workflows/prompt-bot.yml"

permissions:
  contents: write

jobs:
  run-prompt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Collect the prompt from: repository_dispatch → workflow input → default
      - name: Resolve prompt (supports multiline)
        shell: bash
        run: |
          echo "PROMPT<<'EOF'" >> "$GITHUB_ENV"
          if [ -n "${{ github.event.client_payload.prompt }}" ]; then
            printf "%s\n" "${{ github.event.client_payload.prompt }}" >> "$GITHUB_ENV"
          elif [ -n "${{ inputs.prompt }}" ]; then
            printf "%s\n" "${{ inputs.prompt }}" >> "$GITHUB_ENV"
          else
            printf "%s\n" "Write a concise landing section for a Next.js site about OhmWork: a no-BS electrician’s guide. Include a punchy H1, a one-sentence subhead, and a single CTA link labeled “Start Now” that points to /guide." >> "$GITHUB_ENV"
          fi
          echo "EOF" >> "$GITHUB_ENV"

      - name: Call OpenAI and write app/page.tsx
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PROMPT: ${{ env.PROMPT }}
        run: |
          node - <<'NODE'
          const fs = require('fs');

          const apiKey = process.env.OPENAI_API_KEY;
          const prompt = process.env.PROMPT || "";
          if (!apiKey) { console.error("Missing OPENAI_API_KEY secret"); process.exit(1); }

          async function askOpenAI(p) {
            const resp = await fetch('https://api.openai.com/v1/responses', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({
                model: 'gpt-4.1-mini',
                input: p
              })
            });
            if (!resp.ok) {
              const txt = await resp.text();
              throw new Error(`OpenAI error (${resp.status}): ${txt}`);
            }
            const data = await resp.json();
            return (data.output_text || '').trim();
          }

          (async () => {
            const text = await askOpenAI(prompt);
            if (!text) { throw new Error("No output_text from model"); }

            // Make the model text safe to embed inside TSX via dangerouslySetInnerHTML
            const html = String(text)
              .replace(/&/g, '&amp;')
              .replace(/</g, '&lt;')
              .replace(/>/g, '&gt;')
              .replace(/\r?\n/g, '<br/>');

            const tsx = `import React from "react";

export default function Page() {
  return (
    <main style={{
      minHeight: "100vh",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      background: "#0b1220",
      color: "white",
      padding: "4rem 1rem"
    }}>
      <div style={{ maxWidth: 720 }}>
        <div dangerouslySetInnerHTML={{ __html: \`${html}\` }} />
        <a href="/guide" style={{
          display: "inline-block",
          marginTop: "1.5rem",
          padding: "0.75rem 1.25rem",
          borderRadius: "0.5rem",
          background: "#10b981",
          color: "black",
          fontWeight: 600,
          textDecoration: "none"
        }}>Start Now</a>
      </div>
    </main>
  );
}
`;

            fs.mkdirSync('app', { recursive: true });
            fs.writeFileSync('app/page.tsx', tsx);
            console.log('Wrote app/page.tsx with', tsx.length, 'chars');
          })().catch(err => { console.error(err); process.exit(1); });
          NODE

      - name: Commit & push changes (only if changed)
        shell: bash
        run: |
          git config user.name "ai-bot"
          git config user.email "ai-bot@users.noreply.github.com"
          if git diff --quiet; then
            echo "No changes to commit."
          else
            git add app/page.tsx
            git commit -m "AI bot: update homepage"
            git push
          fi
