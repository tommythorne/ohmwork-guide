name: Repo Doctor

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write

jobs:
  doctor:
    if: contains(github.event.comment.body, '/doctor')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Summarize basic repo state
        run: |
          {
            echo "## Repo Doctor — Basic State"
            echo
            echo "### Root listing"
            echo '```'
            ls -la
            echo '```'
            echo
            echo "### Key files presence"
            for f in "app/page.tsx" "app/api/deploy/route.ts" "package.json" "next.config.*" "tsconfig.json"; do
              if [ -f "$f" ]; then echo "✔ $f"; else echo "✖ $f (missing)"; fi
            done
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Show dependencies (package.json)
        run: |
          echo "## package.json (dependencies)" >> "$GITHUB_STEP_SUMMARY"
          echo '```json' >> "$GITHUB_STEP_SUMMARY"
          if command -v jq >/dev/null 2>&1; then
            jq . package.json >> "$GITHUB_STEP_SUMMARY" || cat package.json >> "$GITHUB_STEP_SUMMARY"
          else
            cat package.json >> "$GITHUB_STEP_SUMMARY"
          fi
          echo '```' >> "$GITHUB_STEP_SUMMARY"

      - name: Install deps
        run: |
          npm ci || npm install

      - name: Try Next.js build
        id: build
        continue-on-error: true
        run: |
          set +e
          npm run build 2>&1 | tee build.log
          code=$?
          echo "code=$code" >> $GITHUB_OUTPUT
          echo "## Next.js build log" >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          tail -n 400 build.log >> "$GITHUB_STEP_SUMMARY" || true
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          exit $code

      - name: Check required secrets presence
        run: |
          echo "## Secrets presence" >> "$GITHUB_STEP_SUMMARY"
          for s in VERCEL_TOKEN DEPLOY_SECRET GITHUB_TOKEN; do
            if [ -n "${{ secrets[s] }}" ]; then
              echo "✔ $s = SET" >> "$GITHUB_STEP_SUMMARY"
            else
              echo "✖ $s = MISSING" >> "$GITHUB_STEP_SUMMARY"
            fi
          done

      - name: Test /api/deploy endpoint with DEPLOY_SECRET
        env:
          DEPLOY_SECRET: ${{ secrets.DEPLOY_SECRET }}
        run: |
          echo "## /api/deploy test" >> "$GITHUB_STEP_SUMMARY"
          if [ -z "$DEPLOY_SECRET" ]; then
            echo "DEPLOY_SECRET missing; skipping endpoint test." >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          URL="https://ohmwork-guide.vercel.app/api/deploy?secret=$DEPLOY_SECRET"
          echo "GET $URL" >> "$GITHUB_STEP_SUMMARY"
          curl -sS -D headers.txt "$URL" -o body.txt || true
          echo '### Response headers' >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          cat headers.txt >> "$GITHUB_STEP_SUMMARY" || true
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          echo '### Body' >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          cat body.txt >> "$GITHUB_STEP_SUMMARY" || true
          echo '```' >> "$GITHUB_STEP_SUMMARY"
